{"version":3,"sources":["components/Header.js","data/units.js","components/Variable.js","utils/utilityFuncs.js","components/Measurements.js","components/Variables.js","hooks/useForm.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","lengthsData","timesData","measurementsData","Variable","location","unit","number","updateValue","measurement","TextField","type","id","name","value","onChange","e","variant","label","FormControl","InputLabel","Select","labelId","map","lengthData","MenuItem","timeData","roundToTwo","num","Math","round","useStyles","makeStyles","root","width","Measurements","updateMeasureValue","classes","measurementData","Variables","defaults","useState","values","setValues","unitDict","Kilometer","Meter","Centimeter","Millimeter","Mile","Yard","Foot","Inch","Year","Month","Week","Day","Hour","Minute","Second","Millisecond","target","parseInt","newValues","leftUnitShort","leftUnit","rightUnitShort","rightUnit","newRightNumber","convert","leftNumber","from","to","rightNumber","newLeftNumber","useForm","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6224305.chunk.js","sourcesContent":["export default function Header() {\n  return (\n    <div className=\"Header\">\n\n      <h1>Unit Converter</h1>\n    </div>\n  )\n}","export const lengthsData = [\"Kilometer\", \"Meter\", \"Centimeter\", \"Millimeter\", \"Mile\", \"Yard\", \"Foot\", \"Inch\"]\n\nexport const timesData = [\"Year\", \"Month\", \"Week\", \"Day\", \"Hour\", \"Minute\", \"Second\", \"Millisecond\"]\n\nexport const measurementsData = [\"Length\", \"Time\"]","import { lengthsData, timesData } from '../data/units';\nimport { TextField, Select, MenuItem, FormControl, InputLabel } from '@mui/material';\n\nexport default function Variable({ location, unit, number, updateValue, measurement }) {\n\n\n  return (\n    <div className=\"Variable\">\n\n      <form>\n        <div className=\"form-container\">\n          <TextField \n            type=\"text\"\n            id={`${location}Number`}\n            name={`${location}Number`}\n            value={number}\n            onChange={(e) => updateValue(e)} \n            variant=\"outlined\"\n            label=\"Number\"\n          />\n\n          <FormControl>\n            <InputLabel id={`${location}Unit-label`}>Unit</InputLabel>\n            <Select\n              name={`${location}Unit`} \n              id={`${location}Unit`} \n              labelId={`${location}Unit-label`}\n              label=\"Unit\"\n              value={unit}\n              onChange={(e) => updateValue(e)}\n            >\n              {\n                (measurement === \"Length\") \n                &&\n                lengthsData.map(lengthData => {\n                  return (\n                    <MenuItem value={lengthData} key={lengthData}>\n                      {lengthData}\n                    </MenuItem>\n                  )\n                }) \n              }\n              {\n                (measurement === \"Time\")\n                &&\n                timesData.map(timeData => {\n                  return (\n                    <MenuItem value={timeData} key={timeData}>\n                      {timeData}\n                    </MenuItem>\n                  )\n                })\n              }\n            </Select>\n          </FormControl>\n        </div>\n      </form>\n    </div>\n  )\n}","export function convertUnits(unitOneNumber, unitOne, unitTwo) {\n  if (unitOne === unitTwo) {\n    return parseInt(unitOneNumber)\n  }\n  if (unitOne === \"Kilometer\" && unitTwo === \"Meter\") {\n    return parseInt(unitOneNumber) * 1000\n  }\n  if (unitOne === \"Kilometer\" && unitTwo === \"Centimeter\") {\n    return parseInt(unitOneNumber) * 100000\n  }\n  if (unitOne === \"Kilometer\" && unitTwo === \"Millimeter\") {\n    return parseInt(unitOneNumber) * 1000000\n  }\n  if (unitOne === \"Meter\" && unitTwo === \"Kilometer\") {\n    return parseInt(unitOneNumber) / 1000\n  }\n  if (unitOne === \"Meter\" && unitTwo === \"Centimeter\") {\n    return parseInt(unitOneNumber) * 100\n  }\n  if (unitOne === \"Meter\" && unitTwo === \"Millimeter\") {\n    return parseInt(unitOneNumber) * 1000\n  }\n  if (unitOne === \"Centimeter\" && unitTwo === \"Kilometer\") {\n    return parseInt(unitOneNumber) / 100000\n  }\n  if (unitOne === \"Centimeter\" && unitTwo === \"Meter\") {\n    return parseInt(unitOneNumber) / 1000\n  }\n  if (unitOne === \"Centimeter\" && unitTwo === \"Millimeter\") {\n    return parseInt(unitOneNumber) * 10\n  }\n  if (unitOne === \"Millimeter\" && unitTwo === \"Kilometer\") {\n    return parseInt(unitOneNumber) / 1000000\n  }\n  if (unitOne === \"Millimeter\" && unitTwo === \"Meter\") {\n    return parseInt(unitOneNumber) / 1000\n  }\n  if (unitOne === \"Millimeter\" && unitTwo === \"Centimeter\") {\n    return parseInt(unitOneNumber) / 10\n  }\n}\n\nexport function roundToTwo(num) {\n  return +(Math.round(num + \"e+2\") + \"e-2\")\n}","import { measurementsData } from \"../data/units\"\nimport { Select, MenuItem, FormControl, InputLabel } from \"@mui/material\"\nimport { makeStyles } from \"@mui/styles\"\n\nconst useStyles = makeStyles({\n  root: {\n    width: 150\n  }\n})\n\nexport default function Measurements({ measurement, updateMeasureValue }) {\n\n  const classes = useStyles();\n\n  return (\n    <div className=\"Measurements\">\n\n      <FormControl>\n        <InputLabel id=\"measurement-label\">Measurement</InputLabel>\n        <Select\n          name=\"measurement\"\n          labelId=\"measurement-label\"\n          id=\"measurement\"\n          value={measurement}\n          label=\"Measurement\"\n          onChange={(e) => updateMeasureValue(e)}\n          className={classes.root}\n        >\n          {measurementsData.map(measurementData => {\n            return (\n              <MenuItem value={measurementData} key={measurementData}>\n                {measurementData}\n              </MenuItem>\n            )\n          })}\n        </Select>\n      </FormControl>\n\n    </div>\n  )\n}","import Variable from \"./Variable\";\nimport { measurementsData, lengthsData } from '../data/units';\nimport useForm from \"../hooks/useForm\";\nimport Measurements from \"./Measurements\";\n\nexport default function Variables() {\n\n  const { values, updateValue } = useForm({\n    leftUnit: lengthsData[0],\n    rightUnit: lengthsData[0],\n    leftNumber: 0,\n    rightNumber: 0,\n    measurement: measurementsData[0]\n  })\n\n  return (\n    <div className=\"Variables\">\n      <Measurements \n        measurement={values.measurement}\n        updateMeasureValue={updateValue}\n      />\n      <div className=\"variable-container\">\n        <Variable \n          location=\"left\" \n          unit={values.leftUnit} \n          number={values.leftNumber}\n          updateValue={updateValue}\n          measurement={values.measurement}\n        />\n        <Variable \n          location=\"right\" \n          unit={values.rightUnit} \n          number={values.rightNumber}\n          updateValue={updateValue}\n          measurement={values.measurement}\n        />\n      </div>\n    </div>\n  )\n}","import { useState } from 'react';\nimport * as convert from 'convert-units';\nimport { roundToTwo } from '../utils/utilityFuncs';\nimport { lengthsData, timesData } from '../data/units';\n\nexport default function useForm(defaults) {\n\n  const [values, setValues] = useState(defaults);\n\n  const unitDict = {\n    Kilometer: 'km',\n    Meter: 'm',\n    Centimeter: 'cm',\n    Millimeter: 'mm',\n    Mile: 'mi',\n    Yard: 'yd',\n    Foot: 'ft',\n    Inch: 'in',\n    Year: 'year',\n    Month: 'month',\n    Week: 'week',\n    Day: 'd',\n    Hour: 'h',\n    Minute: 'min',\n    Second: 's',\n    Millisecond: 'ms'\n  }\n\n  function updateValue(e) {\n    // check if its a number and convert\n    let { value } = e.target;\n    if (e.target.type === 'number') {\n      value = parseInt(e.target.value);\n    }\n    \n    const newValues = {\n      // copy the existing values into it\n      ...values,\n      // update the new value that changed\n      [e.target.name]: value,\n    }\n\n    const leftUnitShort = unitDict[newValues.leftUnit];\n    const rightUnitShort = unitDict[newValues.rightUnit];\n\n    if (e.target.name === \"leftNumber\" || e.target.name === \"rightUnit\") {\n\n      const newRightNumber = convert(newValues.leftNumber).from(leftUnitShort).to(rightUnitShort);\n\n      newValues.rightNumber = roundToTwo(newRightNumber);\n\n    }\n\n    if (e.target.name === \"rightNumber\" || e.target.name === \"leftUnit\") {\n\n      const newLeftNumber = convert(newValues.rightNumber).from(rightUnitShort).to(leftUnitShort);\n\n      newValues.leftNumber = roundToTwo(newLeftNumber);\n\n    }\n\n    if (e.target.name === \"measurement\") {\n      if (newValues.measurement === \"Length\") {\n        newValues.leftUnit = lengthsData[0];\n        newValues.rightUnit = lengthsData[0];\n      }\n      if (newValues.measurement === \"Time\") {\n        newValues.leftUnit = timesData[0];\n        newValues.rightUnit = timesData[0];\n      }\n\n      newValues.leftNumber = 0;\n      newValues.rightNumber = 0;\n\n    }\n\n    setValues(newValues);\n\n  }\n\n  return { values, updateValue };\n}\n","import './App.css';\nimport Header from './components/Header';\nimport Variables from './components/Variables';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"wrapper\">\n        <Variables />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}